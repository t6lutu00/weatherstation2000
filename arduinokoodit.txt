
const int pin_t = A1;
const float aref = 5;
//Kosteusmittaus, esimerkki H25K5
//Esivastus megaohmin luokkaa
//Taajuuden generointi PVM:llä nastaan 5, taajuus 980Hz
//AD-muuntimen kanava 0
//AD-muuntimella luetaan keskeytyksin 125 näytettä taulukkoon(jakso),joista haetaan maksimi.
//Maksimi on verrannollinen kosteuteen
//Kalibrointitaulukkon on otettu 4 arvoparia, joista lasketaan kosteus
int analogVal;
int taul[125];
int cnt=0;
int maxval=0;
volatile int arvo=0;
int i;
int ad[4]={1023,890,577,424}; //ad-muuntimen arvo
int kost[4]={20,40,60,80}; //vastaava kostesuarvo
float kosteus;
void setup()
{
 Serial.begin(9600);
 analogWrite(5,128); //980Hz PWM, pin 5
 noInterrupts();
 ADMUX = (1<<REFS0);
 //ADMUX |= 8;
 ADCSRA |= B10000000;
 ADCSRA |= B00100000;
 ADCSRB &= B11111000;
 ADCSRA |= B00000111;
 ADCSRA |= B00001000;
 ADCSRA |=B01000000;
 interrupts();

}
void loop()
{
  float temp = lampo();
  float humi = humidity();
  Serial.print("Humidity: ");
  Serial.print(humi);
  Serial.print("\n"); 
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.print("\n");
  delay(1000); 
}
float humidity(){
  
 noInterrupts();
ADMUX &= B11011111;
 ADMUX |= B01000000;
 ADMUX &= B11110000;
 //ADMUX |= 8;
 ADCSRA |= B10000000;
 ADCSRA |= B00100000;
 ADCSRB &= B11111000;
 ADCSRA |= B00000111;
 ADCSRA |= B00001000;
 ADCSRA |=B01000000;
 interrupts();

  if (arvo>= ad[0]) kosteus=kost[0]-(kost[0]-0)*(arvo-ad[0])/(1023-ad[0]);
 
  else if (arvo<ad[0] && arvo>=ad[1]) kosteus=kost[1]-(kost[1]-kost[0])*(arvo-ad[1])/(ad[0]-ad[1]);
 
  else if (arvo<ad[1] && arvo>=ad[2]) kosteus=kost[2]-(kost[2]-kost[1])*(arvo-ad[2])/(ad[1]-ad[2]);
 
  else if (arvo<ad[2] && arvo>=ad[3]) kosteus=kost[3]-(kost[3]-kost[2])*(arvo-ad[3])/(ad[2]-ad[3]);
 
  else kosteus = 100 - (100-kost[3])*(arvo-0)/(ad[3]-0);

  return kosteus;
};

float lampo() 
{ 
  float tempC;
  //noInterrupts();

  ADMUX = 0x00;
  ADMUX = (1<<REFS0);
  ADMUX |= 1;
  ADCSRA = 0x00;
  ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  
  //for (int i=0;i<=64;i++) {
    ADCSRA|=(1<<ADSC);
    while (ADCSRA & (1<<ADSC));
    tempC = (ADCL | (ADCH << 8))*5.0;
  //}
  
  
  //interrupts();
  //float tempC = analogData / 10.24;

 tempC = tempC / 1024;
 tempC = tempC - 0.50;
 tempC *= 100;
 // tempC /=101;
 // tempC -= 156;
  return tempC;
}
ISR(ADC_vect)
{  
 analogVal = ADCL | (ADCH << 8);
 taul[cnt]=analogVal;
 cnt++;
 if(cnt==125)
 {
   maxval=taul[0];
 for(i=0;i<125;i++)
 {
 if (maxval<taul[i+1]) maxval=taul[i+1];
 }
 arvo=maxval;
 cnt=0;
 }
}
